branches:
  only:
  - master
  - travis
  - swift-5

language: objective-c
os: osx
osx_image: xcode11.3
env:
  - scheme='Siesta macOS' platform='OS X'
  - scheme='Siesta iOS'   platform='iOS Simulator'  sim_os='iOS'  sim_os_version='13.3'  sim_device='iPhone 11 Pro'
  - scheme='Siesta iOS'   platform='iOS Simulator'  sim_os='iOS'  sim_os_version='12.4'  sim_device='iPhone SE'
  - scheme='Siesta iOS'   platform='iOS Simulator'  sim_os='iOS'  sim_os_version='11.4'   sim_device='iPhone 6'

  ## Travis doesn't include iOS 9 anymore, so we unfortunately can't regression test on a 32-bit device:
  # - scheme='Siesta iOS'   platform='iOS Simulator' sim_os='iOS'  sim_os_version='9.3'   sim_device='iPhone 4s'

  ## Bundled libraries for tvOS on swift 5.1 are broken; restore when Travis publishes xcode11.4:
  # - scheme='Siesta tvOS'  platform='tvOS Simulator' sim_os='tvOS' sim_os_version='13.3'  sim_device='Apple TV 4K 1080p'

before_install: |
  set -x

  if [[ "$platform" =~ \ Simulator$ ]]; then
    sim_simulator_udid=$(
      xcrun simctl create "Siesta testing device" \
          "com.apple.CoreSimulator.SimDeviceType.${sim_device// /-}" \
          "com.apple.CoreSimulator.SimRuntime.${sim_os}-${sim_os_version//./-}"
    )
    echo "Prelaunching iOS simulator with UDID $sim_simulator_udid"
    xcrun simctl boot $sim_simulator_udid

    # Working for “Library not loaded: /usr/lib/libauto.dylib”; see:
    #   https://stackoverflow.com/questions/55389080/xcode-10-2-failed-to-run-app-on-simulator-with-ios-10
    #   https://developer.apple.com/documentation/xcode_release_notes/xcode_10_2_1_release_notes
    # sudo mkdir "/Library/Developer/CoreSimulator/Profiles/Runtimes/${sim_os} ${sim_os_version}.simruntime/Contents/Resources/RuntimeRoot/usr/lib/swift"
  fi

script: |
  # ------ Certificates ------

  # Thanks to https://github.com/Carthage/Carthage/blob/12fb7881876b4987584e49d00befcd2a8b6b354d/script/cibuild#L29-L51
  # but no thanks to Carthage for refusing to do simulator-only builds that would make all these keychain shenanigans unnecessary.

  KEYCHAIN=ios-build.keychain
  local password=cibuild

  # Create a temporary keychain for code signing.

  security create-keychain -p "$password" "$KEYCHAIN"
  security default-keychain -s "$KEYCHAIN"
  security unlock-keychain -p "$password" "$KEYCHAIN"
  security set-keychain-settings -t 3600 -l "$KEYCHAIN"

  # Download the certificate for the Apple cert authority
  local certpath="/tmp/apple_wwdr.cer"
  curl 'https://developer.apple.com/certificationauthority/AppleWWDRCA.cer' > "$certpath"
  security import "$certpath" -k "$KEYCHAIN" -T /usr/bin/codesign

  # Import our development certificate.
  security import ".ios-dev-cert.p12" -k "$KEYCHAIN" -P "$KEY_PASSWORD" -T /usr/bin/codesign
  ## Slow:
  # echo "Available identities after import:"
  # security find-identity

  # ------ Tools ------

  set -x

  git clone https://github.com/supermarin/xcpretty.git /tmp/xcpretty

  #brew update
  #brew install carthage

  # ------ Dependencies ------

  # Optional pre-download, because builds are so slow on Travis, and Carthage builds _everything_:
  echo "Downloading prebuilt dependencies"
  curl https://innig.net/tmp/siesta-deps-swift-5.tar.bz2 | bzcat | tar xv

  # Uncomment to build with Carthage instead:
  #echo "Building dependencies"
  #carthage bootstrap --platform iOS,osx #--verbose

  # ------ Project build (at last!) ------

  if [[ "$platform" =~ \ Simulator$ ]]; then
    platform="$platform,OS=$sim_os_version,name=Siesta testing device"
  fi

  echo
  echo —————— Running tests for $platform ...
  echo

  Siesta_TestMultipleNetworkProviders=1 \
  travis_retry xcodebuild test \
      -project Siesta.xcodeproj \
      -scheme "$scheme" \
      -destination "platform=$platform" \
    | /tmp/xcpretty/bin/xcpretty -c
  
  buildresult=${PIPESTATUS[0]}

  echo —————— Completed tests for $platform.

  sleep 5  # Workaround for Travis log truncation

  exit $buildresult
